select(babynames, n)
select(babynames, n)
library(tidyverse)
samples <- c("t2A", "t2B", "t2C", "t3A", "t3B", "t3C", "t4A", "t4B", "t4C", "t5A", "t5B", "t5C",
"t6A", "t6B", "t6C", "t7A", "t7B", "t7C", "t8A", "t8B", "t8C")
mus.not_collapsed <- read.table("/mnt/users/defr/SEM1b_experiment/RNA_ts/mmseq_quant_repo/not_collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples))
mus.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
mus.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
unique_hits_threshold <- function(mat, x=1){
return(matrix((mat>x)+0, ncol=ncol(mat), nrow=nrow(mat), dimnames=list(rownames(mat), colnames(mat))))
}
samples_threshold <- function(mat, x=1){
return(rownames(mat)[which(rowSums(mat)>=x)])
}
reliability_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
return(matrix(c(length(rel), 0, length(unrel), length(noexpr)),
ncol=2, dimnames=list(c("est", "no.est"), c("rel", "no.rel"))))
}
reliability_matrix(mus.not_collapsed, uniques.not_collapsed)
reliability_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
rel.multi <- sum(grepl("_.*_", rel))
rel.sin <- length(rel)-rel.multi
unrel.multi <- sum(grepl("_.*_", unrel))
unrel.sin <- length(unrel)-unrel.multi
noexpr.multi <- sum(grepl("_.*_", noexpr))
noexpr.sin <- length(noexpr)-noexpr.multi
return(matrix(c(rel.sin, rel.multi, unrel.sin, unrel.multi, noexpr.sin, noexpr.multi),
ncol=3, dimnames=list(c("singleton", "multi"), c("rel", "no.rel", "no.expr"))))
}
grouping_matrix(mus.collapsed, uniques.collapsed)
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/collapsed.mus", sep = "\t", header = TRUE, row.names = 1))
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/collapsed.mus", sep = "\t", header = F, row.names = 1))
head(tonorm)
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/collapsed.mus",
)
''
samples <- c("t2A", "t2B", "t2C", "t3A", "t3B", "t3C", "t4A", "t4B", "t4C", "t5A", "t5B", "t5C",
"t6A", "t6B", "t6C", "t7A", "t7B", "t7C", "t8A", "t8B", "t8C")
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples)))
head(tonorm)
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/mnt/users/defr/exp_12/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
df_is <-Reduce(function(x, y) merge(x, y, by = "transcript", all=TRUE), p)
rownames(df_is)<-df_is$transcript
df_is <- df_is[,2:22]
colnames(df_is) <- colnames(tonorm)[3:21]
colnames(df_is) <- colnames(tonorm)[1:21]
colnames(df_is)
df_is
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/mnt/users/defr/exp_12/bow_2ndAmpr_counts")
file_names
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june")
file_names <- dir("bow_2ndAmpr_counts")
file_names
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
file_names <- dir("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
df_is <-Reduce(function(x, y) merge(x, y, by = "transcript", all=TRUE), p)
df_is
rownames(df_is)<-df_is$transcript
df_is <- df_is[,2:22]
colnames(tonorm)
1
colnames(df_is) <- colnames(tonorm)[1:21]
Ir <- as.numeric(df_is)
Ir <- as.numeric(df_is)
Il <- 450
Ir <- tonorm["pGEM-3Z",3:23]
Il <- tonorm["pGEM-3Z","length"]
Ir <- tonorm["pGEM-3Z",1:21]
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(tonorm)
Sm <- Sr*(Im/Ir)
Tr <- tonorm
Tm <- ((Tr/Tl))%*%(diag(Sm/Sr))
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(Tm)))
Tr <- 10**tonorm
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(Tm)))
plot(density(as.matrix(log(Tm))))
plot(density(as.matrix(log10(Tm))))
Tr <- exp(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(log10(Tm))))
Tr <- 10**(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(log10(Tm))))
plot(density(as.matrix(log(Tm))))
Tr <- 10**(tonorm)
min(Tr)
Tr <- exp(tonorm)
min(Tr)
?exp
log(exp(3))
Tr <- exp(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(log(Tm))))
write.table(Tm, file = "/home/fdelogu/rna_locustag/june/collapsed_norm.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = TRUE)
write.table(log(Tm), file = "/home/fdelogu/rna_locustag/june/collapsed_norm.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = TRUE)
library(matrixStats)
samples <- c("t2A", "t2B", "t2C", "t3A", "t3B", "t3C", "t4A", "t4B", "t4C", "t5A", "t5B", "t5C",
"t6A", "t6B", "t6C", "t7A", "t7B", "t7C", "t8A", "t8B", "t8C")
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/not_collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples)))
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
df_is <-Reduce(function(x, y) merge(x, y, by = "transcript", all=TRUE), p)
rownames(df_is)<-df_is$transcript
df_is <- df_is[,2:22]
colnames(df_is) <- colnames(tonorm)[1:21]
Tr <- exp(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
write.table(log(Tm), file = "/home/fdelogu/rna_locustag/june/not_collapsed_norm.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = TRUE)
library(tidyverse)
samples <- c("t2A", "t2B", "t2C", "t3A", "t3B", "t3C", "t4A", "t4B", "t4C", "t5A", "t5B", "t5C",
"t6A", "t6B", "t6C", "t7A", "t7B", "t7C", "t8A", "t8B", "t8C")
mus.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
mus.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
unique_hits_threshold <- function(mat, x=1){
return(matrix((mat>x)+0, ncol=ncol(mat), nrow=nrow(mat), dimnames=list(rownames(mat), colnames(mat))))
}
mus.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed_norm.txt",
header=F, row.names=1, col.names=c("gene", samples))
samples <- c("t2A", "t2B", "t2C", "t3A", "t3B", "t3C", "t4A", "t4B", "t4C", "t5A", "t5B", "t5C",
"t6A", "t6B", "t6C", "t7A", "t7B", "t7C", "t8A", "t8B", "t8C")
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/not_collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples)))
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
df_is <-Reduce(function(x, y) merge(x, y, by = "transcript", all=TRUE), p)
rownames(df_is)<-df_is$transcript
df_is <- df_is[,2:22]
colnames(df_is) <- colnames(tonorm)[1:21]
Tr <- exp(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(log(Tm))))
write.table(log(Tm), file = "/home/fdelogu/rna_locustag/june/not_collapsed_norm.mus", sep = "\t", quote = FALSE, row.names = TRUE, col.names = F)
tonorm <- as.matrix(read.table("/home/fdelogu/rna_locustag/june/collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples)))
## Alternative section NEW
setwd("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
file_names <- dir("/home/fdelogu/rna_locustag/june/bow_2ndAmpr_counts")
p <- lapply(file_names, function(y) read.table(y, sep="\t", header = FALSE, col.names = c("transcript", y)))
df_is <-Reduce(function(x, y) merge(x, y, by = "transcript", all=TRUE), p)
rownames(df_is)<-df_is$transcript
df_is <- df_is[,2:22]
colnames(df_is) <- colnames(tonorm)[1:21]
Tr <- exp(tonorm)
Ir <- as.numeric(df_is)
Ir <- df_is
Im <- 6.228*10**9
Sr <- colSums(Tr)
Sm <- Sr*(Im/Ir)
Tm <- ((Tr))%*%(diag(Sm/Sr))
plot(density(as.matrix(log(Tm))))
write.table(log(Tm), file = "/home/fdelogu/rna_locustag/june/collapsed_norm.mus", sep = "\t", quote = FALSE, row.names = TRUE, col.names = F)
mus.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
mus.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
unique_hits_threshold <- function(mat, x=1){
return(matrix((mat>x)+0, ncol=ncol(mat), nrow=nrow(mat), dimnames=list(rownames(mat), colnames(mat))))
}
samples_threshold <- function(mat, x=1){
return(rownames(mat)[which(rowSums(mat)>=x)])
}
reliability_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
return(matrix(c(length(rel), 0, length(unrel), length(noexpr)),
ncol=2, dimnames=list(c("est", "no.est"), c("rel", "no.rel"))))
}
reliability_matrix(mus.not_collapsed, uniques.not_collapsed)
reliability_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
rel.multi <- sum(grepl("_.*_", rel))
rel.sin <- length(rel)-rel.multi
unrel.multi <- sum(grepl("_.*_", unrel))
unrel.sin <- length(unrel)-unrel.multi
noexpr.multi <- sum(grepl("_.*_", noexpr))
noexpr.sin <- length(noexpr)-noexpr.multi
return(matrix(c(rel.sin, rel.multi, unrel.sin, unrel.multi, noexpr.sin, noexpr.multi),
ncol=3, dimnames=list(c("singleton", "multi"), c("rel", "no.rel", "no.expr"))))
}
grouping_matrix(mus.collapsed, uniques.collapsed)
caz.db <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected.txt", header=F,
col.names=c("ORF", "Domain", "Family", "Genome"))
extract.caz <- function(mat, caz){
ORFs <- unique(caz$ORF)
selected <- c()
for(i in rownames(mat)){
for(j in ORFs){
for(k in strsplit(i, ";")){
if(j==k){
selected <- c(selected, i)
}
}
}
}
return(unique(selected))
}
not_collapsed.caz <- extract.caz(mus.not_collapsed, caz.db)
collapsed.caz <- extract.caz(mus.collapsed, caz.db)
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
grouping_matrix(mus.collapsed[not_collapsed.caz,], uniques.collapsed[not_collapsed.caz,])
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
reliability_matrix(mus.not_collapsed, uniques.not_collapsed)
reliability_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix(mus.collapsed, uniques.collapsed)
mus.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
mus.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.mus",
header=F, row.names=1, col.names=c("gene", samples))
uniques.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed.uniques",
header=F, row.names=1, col.names=c("gene", samples))
unique_hits_threshold <- function(mat, x=1){
return(matrix((mat>x)+0, ncol=ncol(mat), nrow=nrow(mat), dimnames=list(rownames(mat), colnames(mat))))
}
samples_threshold <- function(mat, x=1){
return(rownames(mat)[which(rowSums(mat)>=x)])
}
reliability_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
return(matrix(c(length(rel), 0, length(unrel), length(noexpr)),
ncol=2, dimnames=list(c("est", "no.est"), c("rel", "no.rel"))))
}
reliability_matrix(mus.not_collapsed, uniques.not_collapsed)
reliability_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix <- function(mus, uniques, h=0, s=1){
rel <- samples_threshold(unique_hits_threshold(uniques, h), s)
nohits <- rownames(mus)[which(!rownames(mus)%in%rel)]
hits <- samples_threshold(unique_hits_threshold(10**mus))
unrel <- hits[which(!hits%in%rel)]
noexpr <- nohits[which(!nohits%in%hits)]
rel.multi <- sum(grepl("_.*_", rel))
rel.sin <- length(rel)-rel.multi
unrel.multi <- sum(grepl("_.*_", unrel))
unrel.sin <- length(unrel)-unrel.multi
noexpr.multi <- sum(grepl("_.*_", noexpr))
noexpr.sin <- length(noexpr)-noexpr.multi
return(matrix(c(rel.sin, rel.multi, unrel.sin, unrel.multi, noexpr.sin, noexpr.multi),
ncol=3, dimnames=list(c("singleton", "multi"), c("rel", "no.rel", "no.expr"))))
}
grouping_matrix(mus.collapsed, uniques.collapsed)
caz.db <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected.txt", header=F,
col.names=c("ORF", "Domain", "Family", "Genome"))
extract.caz <- function(mat, caz){
ORFs <- unique(caz$ORF)
selected <- c()
for(i in rownames(mat)){
for(j in ORFs){
for(k in strsplit(i, ";")){
if(j==k){
selected <- c(selected, i)
}
}
}
}
return(unique(selected))
}
not_collapsed.caz <- extract.caz(mus.not_collapsed, caz.db)
collapsed.caz <- extract.caz(mus.collapsed, caz.db)
grouping_matrix(mus.collapsed[not_collapsed.caz,], uniques.collapsed[not_collapsed.caz,])
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
grouping_matrix(mus.collapsed[not_collapsed.caz,], uniques.not_collapsed[not_collapsed.caz,])
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
grouping_matrix(mus.not_collapsed, uniques.not_collapsed)
grouping_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
grouping_matrix(mus.not_collapsed[not_collapsed.caz,], uniques.not_collapsed[not_collapsed.caz,])
grouping_matrix(mus.not_collapsed, uniques.not_collapsed)
grouping_matrix(mus.collapsed, uniques.collapsed)
norm.not_collapsed <- read.table("/home/fdelogu/rna_locustag/june/not_collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
norm.collapsed <- read.table("/home/fdelogu/rna_locustag/june/collapsed_norm.mus",
header=F, row.names=1, col.names=c("gene", samples))
expr <- norm.collapsed[samples_threshold(unique_hits_threshold(uniques.collapsed, 1), 1)]
expr <- norm.collapsed[samples_threshold(unique_hits_threshold(uniques.collapsed, 1), 1),]
plot(density(as.matrix(expr)))
datRep1 <- norm.collapsed[samples_threshold(unique_hits_threshold(uniques.collapsed, 1), 1),]
datRep1 <- t(norm.collapsed[samples_threshold(unique_hits_threshold(uniques.collapsed, 1), 1),])
datRep1.1 <- datRep1[-18,]
datRep1.1[datRep1.1 == 0] <- NA
dim(datRep1.1)
gsg = goodSamplesGenes(datRep1.1, verbose = 3, minNSamples = 2)
library(WGCNA)
gsg = goodSamplesGenes(datRep1.1, verbose = 3, minNSamples = 2)
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datRep1.1)[!gsg$goodGenes], collapse = ", ")))
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datRep1.1)[!gsg$goodSamples], collapse = ", ")))
# Remove the offending genes and samples from the data:
datExpr0 = datRep1.1[gsg$goodSamples, gsg$goodGenes]
} else{
datExpr0 = datRep1.1
}
datExpr0[is.na(datExpr0)] <- 0
datExpr1 <- datExpr0
datExprCe <- datExpr1
datExprCe.scal <- scale(datExprCe, center = TRUE, scale = TRUE)
heatmap(as.matrix(datExprCe.scal), scale = 'none', Rowv = NA)
di <- dist(t(datExprCe.scal), method = "euclidean")
hc <- hclust(di)
class <- dynamicTreeCut::cutreeDynamic(hc, minClusterSize = 7, method = 'hybrid', distM = as.matrix(di), deepSplit=1)
dynamicColors = labels2colors(class)
plotDendroAndColors(hc, dynamicColors, dendroLabels = FALSE)
MEList = moduleEigengenes(datExprCe.scal, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
MEDissThres = 0.20
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
datRep1 <- t(norm.collapsed[samples_threshold(unique_hits_threshold(uniques.collapsed[collapsed.caz,], 1), 1),])
dim(datRep1)
datRep1.1 <- datRep1[-18,]
datRep1.1[datRep1.1 == 0] <- NA
gsg = goodSamplesGenes(datRep1.1, verbose = 3, minNSamples = 2)
if (!gsg$allOK){
# Optionally, print the gene and sample names that were removed:
if (sum(!gsg$goodGenes)>0)
printFlush(paste("Removing genes:", paste(names(datRep1.1)[!gsg$goodGenes], collapse = ", ")))
if (sum(!gsg$goodSamples)>0)
printFlush(paste("Removing samples:", paste(rownames(datRep1.1)[!gsg$goodSamples], collapse = ", ")))
# Remove the offending genes and samples from the data:
datExpr0 = datRep1.1[gsg$goodSamples, gsg$goodGenes]
} else{
datExpr0 = datRep1.1
}
datExpr0[is.na(datExpr0)] <- 0
datExpr1 <- datExpr0
datExprCe <- datExpr1
datExprCe.scal <- scale(datExprCe, center = TRUE, scale = TRUE)
heatmap(as.matrix(datExprCe.scal), scale = 'none', Rowv = NA)
di <- dist(t(datExprCe.scal), method = "euclidean")
hc <- hclust(di)
class <- dynamicTreeCut::cutreeDynamic(hc, minClusterSize = 7, method = 'hybrid', distM = as.matrix(di), deepSplit=1)
dynamicColors = labels2colors(class)
plotDendroAndColors(hc, dynamicColors, dendroLabels = FALSE)
MEList = moduleEigengenes(datExprCe.scal, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
MEDissThres = 0.20
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
merge = mergeCloseModules(datExprCe.scal, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(hc, cbind(dynamicColors, mergedColors), c("Dynamic Tree Cut", "Merged dynamic"), dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
#sizeGrWindow(8,9)
plotMEpairs(mergedMEs)
MEDissThres = 0.10
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
merge = mergeCloseModules(datExprCe.scal, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs
sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(hc, cbind(dynamicColors, mergedColors), c("Dynamic Tree Cut", "Merged dynamic"), dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
#sizeGrWindow(8,9)
plotMEpairs(mergedMEs)
collapsed.caz
mergedColors
as.factor(mergedColors)
as.numeric(mergedColors)
as.numeric(as.factor(mergedColors))
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, row.names=1)
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F)
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, row.names=1)
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, row.names=1, sep="\t")
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected.txt", header=F, row.names=1, sep="\t")
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected.txt", header=F, sep="\t")
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, sep="\t")
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, row.names=1, sep="\t")
caz.ann <- read.table("/home/fdelogu/rna_locustag/curated_cazymes_phil/caz_selected_ext.txt", header=F, sep="\t")
names(caz.mod) <- colnames(datExprCe)
caz.mod <- as.numeric(as.factor(mergedColors))
names(caz.mod) <- colnames(datExprCe)
caz.df <- cbind(caz.ann, caz.mod[caz.ann[,1]])
head(caz.df)
tail(caz.df)
colnames(caz.df) <- c("Gene_group", "CAZ_Domain", "CAZ_group", "Expr_module")
tail(caz.df)
colnames(caz.df) <- c("Gene_group", "CAZ_Domain", "CAZ_group",  "Genome","Expr_module")
tail(caz.df)
write.table(caz.df, file = "/home/fdelogu/rna_locustag/june/CAZset.txt", sep = "\t", quote=FALSE, row.names=TRUE, col.names=T)
write.table(caz.df, file = "/home/fdelogu/rna_locustag/june/CAZset.txt", sep = "\t", quote=FALSE, row.names=F, col.names=T)
grouping_matrix(mus.not_collapsed, uniques.not_collapsed)
grouping_matrix(mus.collapsed, uniques.collapsed)
grouping_matrix(mus.not_collapsed[not_collapsed.caz,], uniques.not_collapsed[not_collapsed.caz,])
grouping_matrix(mus.collapsed[collapsed.caz,], uniques.collapsed[collapsed.caz,])
MEDissThres = 0.10
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
sizeGrWindow(12, 9)
plot(METree, main = "Clustering of module eigengenes", xlab = "", sub = "")
MEDissThres = 0.10
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
MEDissThres = 0.20
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
